name: Testes Robot Framework

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  robot-run:
    runs-on: ubuntu-latest

    steps:
    # Passo 1: Clonar o código
    - name: Checkout
      uses: actions/checkout@v4

    # Passo 2: Configurar Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Passo 3: Instalar dependências Robot
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install robotframework
        pip install robotframework-seleniumlibrary

    # Passo 4: Instalar Chrome for Testing + Chromedriver compatíveis
    - name: Instalar Chrome + Chromedriver
      run: |
        wget https://storage.googleapis.com/chrome-for-testing-public/114.0.5735.90/linux64/chrome-linux64.zip
        wget https://storage.googleapis.com/chrome-for-testing-public/114.0.5735.90/linux64/chromedriver-linux64.zip
        unzip chrome-linux64.zip
        unzip chromedriver-linux64.zip
        sudo mv chrome-linux64 /opt/google-chrome
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver

    # Passo 5: Rodar os testes Robot Framework
    - name: Executar testes
      run: |
        export DISPLAY=:99.0
        export CHROME_BIN=/opt/google-chrome/chrome
        Xvfb :99 -screen 0 1280x1024x24 2>/dev/null &
        robot --output output.xml tests/

    # Passo 6: Gerar relatórios (mesmo se os testes falharem)
    - name: Gerar relatórios
      if: always()
      run: |
        rebot --output output.xml --log log.html --report report.html

    # Passo 7: Upload de relatórios
    - name: Upload relatórios Robot Framework
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Relatorios-RobotFramework
        path: |
          log.html
          report.html
          output.xml
        retention-days: 7